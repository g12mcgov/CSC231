/*
* 
* 
* Author: Grant McGovern
* Date: 23 March 2015  
*
* ~ Introduction to Prolog: Lab 8 ~
*
*/

/* Problem 1 Related */

/* Facts about who's male */
male(grant).
male(robert).
male(stuart).
male(gordon).
male(william).
male(matt).
male(andrew).
male(ryan).
male(gene).
male(ed).

/* Facts about who's female */
female(nancy).
female(denise).
female(meghan).
female(sue).
female(samantha).
female(morgan).
female(evelyn).
female(shirley).

/* Facts describing parent, child relationships */ 
parent(robert,grant).
parent(robert,meghan).
parent(nancy,grant).
parent(nancy,meghan).
parent(gordon, william).
parent(gordon, caroline).
parent(stuart, andrew).
parent(stuart, morgan).
parent(denise, matt).
parent(sue, samantha).
parent(sue, ryan).
parent(shirley, rob).
parent(shirley, sue).
parent(shirley, denise).
parent(ed, rob).
parent(ed, denise).
parent(ed, sue).
parent(gene, nancy).
parent(gene, gordon).
parent(gene, stuart).
parent(evelyn, nancy).
parent(evelyn, gordon).
parent(evelyn, stuart).

/* A definition for siblings - share the same parent */
siblings(X,Y) :- parent(Z,X), parent(Z,Y), X \= Y.
/* A definition for mother - a female parent */
mother(X,Y) :- parent(X,Y), female(X).
/* Alternate definitions for grandmother (mother's mother or father's mother). */
grandmother(X,Y) :- mother(X,Z), mother(Z,Y).
/* Can't use the next entry because I haven't yet defined father */
/* grandmother(X,Y) :- mother(X,Z), father(Z,Y). */
/* Recursive definition of ancestor */
ancestor(X,Y) :- parent(X,Y).
ancestor(X,Y) :- parent(X,Z),ancestor(Z,Y).

/* Father Relationship */
father(X, Y) :- parent(X, Y), male(X).

/* Daughter Relationship */
daughter(X, Y) :- female(X), parent(Y, X).

/* Son Relationship */
son(X, Y) :- male(X), parent(Y, X).

/* Sister Relationship */
sister(X, Y) :- siblings(X, Y), female(X), X \= Y.

/* Brother Relationship */
brother(X, Y) :- siblings(X, Y), male(X), X \= Y.

/* Grandfather Relationship */ /* Check for both father AND mother */
grandfather(X, Y) :- father(X, Z), father(Z, Y).
grandfather(X, Y) :- father(X, Z), mother(Z, Y).


/* Aunt Relationship */
aunt(X, Y) :- sister(X, Z), mother(Z, Y).
aunt(X, Y) :- sister(X, Z), father(Z, Y).

/* Uncle Relationship */
uncle(X, Y) :- brother(X, Z), father(Z, Y).
uncle(X, Y) :- brother(X, Z), mother(Z, Y).

/* Cousin Relationship */
cousin(X, Y) :- parent(X, Z), uncle(Z, Y).
cousin(X, Y) :- parent(X, Z), aunt(Z, Y).


/* Problem 2 Related */
/* No help here - review the arithmetic/equality operators and the recursion examples */

/* Computes the isnatural() method */
isnatural(0).
isnatural(X) :- X > 0, Y is X-1, isnatural(Y).

/* Computes the factorial() method */
factorial(0, 1).
factorial(X, Y) :- X > 0, Z is X-1, factorial(Z, W), Y is X * W.

/* Computes the fibonacci series */
fibonacci(0, 1).
fibonacci(1, 1).
fibonacci(X, Y) :- X > 1, Z is X-1, W is X-2, 
				fibonacci(Z, P), 
				fibonacci(W, Q), 
				Y is P + Q.

/* ^^ Test as factorial(0,X). */


/* Problem 3 Related */

fulfilledCSMajor(X) :- math(X), cscore(X), csupperlevel(X).

/* Test if math requirement has been satisfied */
math(X) :- taken(X, math, 112), taken(X, math, 117), optional(X).

/* Where `X` is an inputted student */
optional(X) :- taken(X, math, 121).
optional(X) :- taken(X, math, 205).
optional(X) :- taken(X, math, 206).

/* Core CS Requirements */
cscore(X) :- taken(X, cs, 111), taken(X, cs, 112), taken(X, cs, 211), 
			taken(X, cs, 221), taken(X, cs, 222), taken(X, cs, 231),
			taken(X, cs, 241), taken(X, cs, 399).

csupperlevel(X) :- taken(X, cs, A), taken(X, cs, B), taken(X, cs, C), taken(X, cs, D),
				A > 299, B > 299, C > 299, D > 299, A \= 399, B \= 399, C \= 399, D \= 399,
				A \= B, A \= C, A \= D, B \= C, B \= D, C \= D.

/* This student, studentA, has fulfilled the BS in CS major requirements */
taken(studentA,cs,111).
taken(studentA,cs,112).
taken(studentA,cs,211).
taken(studentA,cs,221).
taken(studentA,cs,222).
taken(studentA,cs,231).
taken(studentA,cs,241).
taken(studentA,math,112).
taken(studentA,math,117).
taken(studentA,math,121).
taken(studentA,cs,391).
taken(studentA,cs,385).
taken(studentA,cs,343).
taken(studentA,cs,341).
taken(studentA,cs,399).

/* This student, studentB, has taken a lot, but has not fulfilled the */
/* BS in CS major requirements. */ 
taken(studentB,cs,111).
taken(studentB,cs,112).
taken(studentB,cs,221).
taken(studentB,cs,222).
taken(studentB,cs,231).
taken(studentB,cs,241).
taken(studentB,math,111).
taken(studentB,math,112).
taken(studentB,math,117).

/* This student, studentC, has not fulfilled the BS in CS major requirements */
taken(studentC,cs,101).
taken(studentC,cs,111).
taken(studentC,math,117).

